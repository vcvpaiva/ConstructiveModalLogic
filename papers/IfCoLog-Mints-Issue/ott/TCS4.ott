metavar termvar, x , y ::=
  {{ tex \mathit{[[termvar]]} }} {{ com  term variable  }}

indexvar index, i , j , k ::=

grammar
  term, t, r, s, n :: 't_' ::=                                         {{ com term }}
    | x                          ::   :: var                     {{ com variable }}
    | contra                     ::   :: contra
    {{tex \mathsf{contra} }}    
    | \ x : T . t                ::  :: lambdas                  {{ com unary functions }}
    {{tex \lambda [[x]] : [[T]].[[t]] }}
    | t1 t2                      ::  :: application              {{ com function application }}
    | unbox t                    ::  :: unbox
    | unbbox t                    ::  :: unbbox    
    | Box t                      ::  :: PNecessity               {{ com past necessity functor }}
    | Dia t                      ::  :: PPossibility             {{ com past possibility functor }}
    | BBox t                     ::  :: Necessity                {{ com necessity functor }}
    | BDia t                     ::  :: Possibility              {{ com possibility functor }}
    | adjR y = x in t            ::  :: adjR
    {{tex \mathsf{adj_R}\,\blacklozenge [[y]] = [[x]]\,\mathsf{in}\,\Box [[t]] }}
    | adjL y = x in t            ::  :: adjL
    {{tex \mathsf{adj_L}\,\blacklozenge [[y]] = [[x]]\,\mathsf{in}\,[[t]] }}    
    | letBox G be t1 in t2          ::  :: LetPNecessity            {{ com past necessity elim }}
    {{tex \mathsf{let}_\Box\,[[G]]\,\mathsf{be}\,[[t1]]\,\mathsf{in}\,[[t2]] }}
    | letBBox G be t1 in t2          ::  :: LetNecessity            {{ com past necessity elim }}
    {{tex \mathsf{let}_\blacksquare\,[[G]]\,\mathsf{be}\,[[t1]]\,\mathsf{in}\,[[t2]] }}    
    | letDia x : A = s | G be t1 in t2          ::  :: LetDia
    {{tex \mathsf{let}\,\Diamond [[x]]:[[A]]=[[s]] \mid [[G]]\,\mathsf{be}\,[[t1]]\,\mathsf{in}\,[[t2]] }}
    | letBDia x : A = s | G be t1 in t2          ::  :: LetBDia
    {{tex \mathsf{let}\,\blacklozenge [[x]]:[[A]]=[[s]] \mid [[G]]\,\mathsf{be}\,[[t1]]\,\mathsf{in}\,[[t2]] }}    
    | [ t1 / t ] t2              :: M :: Sub    
    | ( t )                      :: S :: Paren
    | h( t )                     :: M :: HParen
    {{tex [[t]] }}
    | r R                        :: M :: MElim
    | letM t1 : T = t2 in t3         :: M :: LetM           
    {{tex \mathsf{let}\,\mathbin{M} [[t1]]:[[T]] = [[t2]]\,\mathsf{in}\,[[t3]] }}
    | vec t                      :: M :: vector
    {{tex \overrightarrow{[[t]]} }}
    | M t                        :: M :: M
    {{tex \mathbin{M} [[t]] }}
    | t1 , ... , tk :: M :: vec
    | [ t1 / x1 ] ... [ tk / xk ] t :: M :: MSubsts

  form, type, A, B, C, T :: 'T_' ::=                   {{ com formula and type }}
    | False            ::   :: False                   {{ com false or the empty type }}
    | Box A            ::   :: PNecessity               {{ com past necessity }}
    | BBox A           ::   :: Necessity              {{ com necessity }}
    | Dia A            ::   :: PPossibility             {{ com past possibility }}
    | BDia A           ::   :: Possibility            {{ com possibility }}
    | A x B            ::   :: Conjunction
    {{tex [[A]] \times [[B]] }}
    | A -> B           ::   :: Arrow                   {{ com implication }}
    | A -o B           ::   :: LArrow
    {{tex [[A]] \limp [[B]] }}
    | F X              ::   :: F
    | M A              :: M :: M
    {{tex \mathbin{M} [[A]] }}

  iform, X, Y, Z :: 'X_' ::=
    | X -> Y  :: :: Arrow
    | Gf A    :: :: G

  G {{ tex \Gamma }}, D {{tex \Delta }} :: G_ ::=      {{ com type context }}
    | .                   ::   :: em                      {{ com empty context }}
    | A                   ::   :: elF                     {{ com formula el }}
    | x : T               ::   :: elT                     {{ com typed el }}
    | G , G'              ::   :: append                  {{ com append }}
    | G1 , ... , Gk       :: M :: vec

  Th {{tex \Theta }}, Ph {{tex \Phi }} :: Th_ ::=
    | .         :: :: em
    | X         :: :: el
    | Th1 , Th2 :: :: append

  terminals :: 'terminals_' ::=
    | F     :: :: F
    {{tex \mathsf{F} }}
    | Gf    :: :: Gf
    {{tex \mathsf{G} }}
    | unbox :: :: unbox
    {{tex \mathsf{unbox}_\Box\, }}
    | unbbox :: :: unbbox
    {{tex \mathsf{unbox}_\blacksquare\, }}    
    | .                   ::   :: Empty
    {{tex \emptyset }}
     | False               ::   :: False
    {{tex \perp }}
    | |-                  ::   :: turnstile
    {{ tex \vdash }}
    | Box                 ::   :: Box
    {{tex \Box }}
    | BBox                ::   :: BBox
    {{ tex \blacksquare }}
    | Dia                 ::   :: Dia
    {{tex \Diamond }}
    | BDia                ::   :: BDia
    {{tex \mathbin{\blacklozenge} }}
    | ->                  ::   :: Arrow
    {{tex \to }}
    | &&                  :: M :: Quad
    {{tex \quad }}
    | |-C                 ::   :: CSeq
    {{tex \vdash_{\mathcal{C} } }}
    | |-L                 ::   :: LSeq
    {{tex \vdash_{\mathcal{L} } }}
    
  formula :: 'formula_' ::=
    | judgement            ::   :: judgement
    | formula1 && formula2 :: M :: quad
    | ( formula )          :: S :: parens
    {{tex [[formula]] }}
    | M is Diamond         :: M :: isDiamond
    {{tex M \in \{\Diamond, \mathbin{\blacklozenge} \} }}
    | formula1 , ... , formulak :: :: vec

defns
  Jtype :: '' ::=

defn
  Th |-C Z :: :: iseq :: i_
by

  Th |-C X && Y,Ph |-C Z
  ---------------------- :: CArleft
  Th,X -> Y,Ph |-C Z

  Th, X |-C Y
  ------------- :: CArRight
  Th |-C X -> Y

  Th;. |-L A
  ----------- :: GRight
  Th |-C Gf A  

defn
  Th ; G |-L A :: :: lseq :: l_
by

  Th |-C X && Y,Ph;G |-L A
  ------------------------ :: IArLeft
  Th,X -> Y,Ph;G |-L A

  Th;G,A |-L B
  --------------- :: LArRight
  Th;G |-L A -o B

  Th;G |-L A && Ph;D,B |-L C
  -------------------------- :: LArLeft
  Th;G,A -o B,D |-L C

  Th |-C X
  ------------ :: FRight
  Th;. |-L F X

  Th,X;G |-L A
  -------------- :: FLeft
  Th;F X,G |-L A

  Th;B,G |-L A
  --------------- :: GLeft
  Th,Gf B;G |-L A

defn
  G |- t : A :: :: type :: ty_   
by

  ----------------- :: ax
  G, x : A |- x : A

  -------------------------- :: false
  G, x : False |- contra : A

  G, x : A |- t : B
  -------------------- :: impI
  G |- \x:A.t : A -> B
 
  G |- t1 : A -> B && G |- t2 : A
  ------------------------------------------- :: impE
  G |- t1 t2 : B

  G |- t : Box B
  ---------------- :: boxE
  G |- unbox t : B

  (G |- t1 : Box A1 , ... , G |- tk : Box Ak) && x1 : Box A1,...,xk : Box Ak |- t : B
  ----------------------------------------------------------------------------------- :: boxI
  G |- letBox x1 : Box A1,...,xk : Box Ak be t1,...,tk in t : Box B

  G |- t : BBox B
  ----------------- :: bboxE
  G |- unbbox t : B

  (G |- t1 : BBox A1 , ... , G |- tk : BBox Ak) && x1 : BBox A1,...,xk : BBox Ak |- t : B
  ----------------------------------------------------------------------------------- :: bboxI
  G |- letBBox x1 : BBox A1,...,xk : BBox Ak be t1,...,tk in t : BBox B

defn
  G |- t1 = t2 : A :: :: eq :: eq_
  {{tex [[G]] \vdash [[t1]] = [[t2]] : [[A]] }}
by

 G,x : A |- t2 = s2 : B && G |- t1 = s1 : A
 ------------------------------------------ :: beta
 G |- (\x:A.t2) t1 = [s1/x]s2 : B

 (G |- t1 = s1 : Box A1,...,G |- tk = sk : Box Ak) && x1 : Box A1,...,xk : Box Ak |- t = s : B
 ----------------------------------------------------------------------------------------- :: unbox
 G |- unbox (letBox x1 : Box A1,...,xk : Box Ak be t1,...,tk in t) = [s1/x1]...[sk/xk]s : B

 (G |- t1 = s1 : BBox A1,...,G |- tk = sk : BBox Ak) && x1 : BBox A1,...,xk : BBox Ak |- t = s : B
 ------------------------------------------------------------------------------------------ :: unbbox
 G |- unbbox (letBBox x1 : BBox A1,...,xk : BBox Ak be t1,...,tk in t) = [s1/x1]...[sk/xk]s : B

 G |- t : A
 -------------- :: refl
 G |- t = t : A

 G |- t2 = t1 : A
 ---------------- :: sym
 G |- t1 = t2 : A

 G |- t1 = t2 : A && G |- t2 = t3 : A
 ------------------------------------ :: trans
 G |- t1 = t3 : A